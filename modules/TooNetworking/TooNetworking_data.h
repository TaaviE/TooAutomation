/*
 *  A networking library for TooAutomation
 *  Copyright (C) 2018 Taavi E.
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, version 3 of the License.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __TooNetworking_data_H__
#define __TooNetworking_data_H__

/**
 * **Reserved message header types**
 *
 * 
 * **System types** are 33-90 ('!'-A'-'Z'), they must not be used outside the library<br>
 * **User types** that are acknowledged are 91-127 ('['-'a'-'z'-'DEL') and 1-32 ('^@'-' ') are not acknowledged<br>
 *
 * @defgroup TOONETWORKING_RESERVED_TYPES
 *
 * @{
 */

enum MessageTypes {
  MSG_NONCE = 'A',
  MSG_SIGNED = 'B',
  MSG_NONCE_REQUEST = 'C',
  MSG_DUAL = 'D',
  MSG_ENCRYPTED = 'E',
  MSG_REGULAR = 'F',
};

/** @} */

/**
 * Used for reading the required hash, payload type and size 
 * to properly deal with received signed payloads
 */
typedef struct Payload_MetadataSigned_Received {
  uint8_t payload_size;     /**< Received payload size */
  uint8_t payload_type;     /**< Received payload type, to deal with messages signed, encrypted or both */
  uint8_t payload_hash[32]; /**< Payload hash generated by the source */
};


/**
 * Used for storing metadata and the nonce sent to
 * other nodes in the network
 */
typedef struct NonceSent {
  uint8_t nonce_to = 255; /**< Destination           */
  uint32_t nonce = 0;     /**< Nonce itself          */
  NonceSent * next = 0;   /**< Next item in the list */
};

/**
 * Used for storing the nonce and metadata
 */
typedef struct NonceReceived {
  uint8_t nonce_from = 255; /**< Sender           */
  uint32_t nonce = 0;       /**< Nonce itself     */
  uint32_t nonce_when = 0;  /**< Nonce timestamp      */
  NonceReceived * next = 0; /**< Next in the list */
};

/**
 * Used to simplify sending nonce replies
 */
typedef struct NoncePayload {
  uint32_t nonce = 0; /**< Nonce itself */
};

/**
 * Used for storing metadata about nonce requests
 */
typedef struct NonceRequested {
  uint8_t nonce_from = 255;         /**< Requested from     */
  uint32_t nonce_request_first = 0; /**< First request time */
  uint32_t nonce_request_last = 0;  /**< Last request time  */
  NonceRequested * next = 0;        /**< Next in the list   */
};

/**
 * Used for storing metadata about the payload
 * until the payload is sent
 */
typedef struct BufferItem {
  uint8_t payload_size = 0;        /**< Size of the payload pointed to by void * payload */
  uint8_t payload_type = 0;        /**< Received payload type, to deal with messages signed, encrypted or both */ //TODO: Bit field
  uint8_t payload_destination = 0; /**< Destination of the payload */
  BufferItem *next = 0;           /**< Next item in the list */
  void *payload = 0;              /**< Pointer to the payload */
};

/**
 * Used for reading the required payload size 
 * to properly deal with the payloads
 * 
 * This is actually inside the sent and received
 * payloads unlike the rest of the data in BufferItem or BufferItem_Signed
 */
typedef struct Payload_Metadata_Received {
  uint8_t payload_size; /**< Received payload size */
  uint8_t payload_type; /**< Received payload type, to deal with messages signed, encrypted or both */
};

#endif __TooNetworking_data_H__
